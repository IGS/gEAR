const datasetCurator = Vue.component('dataset-curator'
      Top of it all, contains a <dataset-title> and then <router-view>

const newDisplay = Vue.component('new-display'
      Main container when adding a new display.
      Contains <configuration-panel> and then one of these three based on conditionals
      keyed on this.plot_type
      <plotly-chart>
      <svg-chart>
      <tsne-chart>

const configurationPanel = Vue.component('configuration-panel'
      Has the dataset type selector of primary/stored analysis then includes for either:
      <primary-config>
      <stored-analysis-config>

const primaryConfig = Vue.component('primary-config')
      Includes <choose-display-type> and then three div options:

        <div v-if="is_type_plotly">
          <plotly-display></plotly-display>
        </div>
        <div v-else-if="is_type_svg">
          <svg-display></svg-display>
        </div>
        <div v-else-if="is_type_tsne">
          <tsne-display></tsne-display>
        </div>

      The 'is_type_*' functions here have all been modified to accept tsne_*

const chooseDisplayType = Vue.component('choose-display-type'
      Is a select box listing the display types.  I have this working so far.  The select
      itself has these:
             :value="plot_type"
             @input="update_plot_type($event)"

      update_plot_type(plot_type) {
        this.set_plot_type(plot_type);

            =- From the vuex.store -=
            set_plot_type({ commit }, plot_type) {
                            // JO - verified that the next line is working
                            commit('set_plot_type', plot_type);
                            // When display type is changed, we want to
                            // reset these other settings so dependent
                            // components
                            commit('set_chart_data', {});
                            commit('set_gene_symbol', '');
                            },


        this.$emit('input', plot_type);
      }

const tsneDisplay = Vue.component('tsne-display'

const plotlyDisplay = Vue.component('plotly-display'
      Has a series of divs, one for each plot_type.  If plot_type='bar', for example
      includes <bar-display> (plotly-display
      tsne_dynamic includes <tsne-plotly-display>
      shows <plotly-arguments>

      DOES NOT HAVE AN ENTRY FOR tsne or tsne_static

const tsnePlotlyDisplay = Vue.component('tsne-plotly-display
      extends scatterDisplay

const scatterDisplay = Vue.component('scatter-display'
      extends barDisplay

const barDisplay = Vue.component('bar-display'
      has a <gene-symbol-input> 


const PlotlyArguments = Vue.component('plotly-arguments'
      Has the Configuration form and 'Preview button'


const addDisplayBtn = Vue.component('add-display-btn', {
  const barDisplay = Vue.component('bar-display', {
  const chooseAnalysis = Vue.component('choose-analysis', {
  const chooseDisplayType = Vue.component('choose-display-type', {
  const chooseStoredAnalysis = Vue.component('choose-stored-analysis', {
  const configurationPanel = Vue.component('configuration-panel', {
  const datasetCurator = Vue.component('dataset-curator', {
  const datasetDisplays = Vue.component('dataset-displays', {
  const datasetDisplay = Vue.component('dataset-display', {
  const datasetTitle = Vue.component('dataset-title', {
  const displayColors = Vue.component('display-colors', {
  const displayNameInput = Vue.component('display-name-input', {
  const displayOrder = Vue.component('display-order', {
  const gearHeader = Vue.component('gear-header', {
  const geneSymbolInput = Vue.component('gene-symbol-input', {
  const groupBy = Vue.component('group-by', {
  const lineDisplay = Vue.component('line-display', {
  const newDisplay = Vue.component('new-display', {
  const ownerDisplays = Vue.component('owner-displays', {
  const PlotlyArguments = Vue.component('plotly-arguments', {
  const plotlyChart = Vue.component('plotly-chart', {
  const plotlyDisplay = Vue.component('plotly-display', {
  const primaryConfig = Vue.component('primary-config', {
  const saveDisplayBtn = Vue.component('save-display-btn', {
  const scatterDisplay = Vue.component('scatter-display', {
  const storedAnalysisConfig = Vue.component('stored-analysis-config', {
  const svgChart = Vue.component('svg-chart', {
  const svgDisplay = Vue.component('svg-display', {
  const tsneChart = Vue.component('tsne-chart', {
  const tsneDisplay = Vue.component('tsne-display', {
  const userDisplays = Vue.component('user-displays', {
  const violinDisplay = Vue.component('violin-display', {
  
  const store = new Vuex.Store({
    state: {
      user: null,
      display_id: null,
      user_displays: [],
      owner_displays: [],
      default_display_id: 0,
      dataset_id: '',
      owner_id: null,
      config: {
        gene_symbol: '',
        analysis: null,
        // Other properties will be set reactive
        // depending on the chart type
      },
      gene_symbols: [],
      dataset_type: 'primary',
      analysis: null,
      columns: [],
      levels: {},
      chart_data: {},
      is_public: false,
      label: '',
      title: '',
      plot_type: null,
      loading_chart: false,
      available_plot_types: {},
    },
    ...
