<!DOCTYPE html>
<html lang="en-US">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width">
<link rel="profile" href="http://gmpg.org/xfn/11">
<!-- Rackspace -->
<title>Silent Matt  &raquo; JavaScript Expression Evaluator</title>

<meta name="microid" content="f291871632b20cfc5171db5cbf2d90c8f5d8c77b"> 
<meta name="verify-v1" content="/VfAl+SjisFcqf4RnEfgMAdikLBwwUB/O97Pe+1pRK0=">
<link rel="openid.server" href="http://www.myopenid.com/server"> 
<link rel="openid.delegate" href="http://mcprogrammer.myopenid.com/">

<link rel="stylesheet" href="http://silentmatt.com/wp-content/themes/depo-square/style.css?56" type="text/css" media="screen">
<!--[if IE 6]><link rel="stylesheet" href="http://silentmatt.com/wp-content/themes/depo-square/ie6.css" type="text/css" media="screen"><![endif]-->
<link rel="alternate" type="application/rss+xml" title="Silent Matt RSS Feed" href="http://silentmatt.com/feed/">
<link rel="alternate" type="application/atom+xml" title="Silent Matt Atom Feed" href="http://silentmatt.com/feed/atom/">
<!--<link rel="pingback" href="http://silentmatt.com/xmlrpc.php">-->

            <script type="text/javascript">//<![CDATA[
            // Google Analytics for WordPress by Yoast v4.3.3 | http://yoast.com/wordpress/google-analytics/
            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', 'UA-1471509-4']);
				            _gaq.push(['_trackPageview']);
            (function () {
                var ga = document.createElement('script');
                ga.type = 'text/javascript';
                ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';

                var s = document.getElementsByTagName('script')[0];
                s.parentNode.insertBefore(ga, s);
            })();
            //]]></script>
			<link rel='stylesheet' id='contact-form-7-css'  href='http://silentmatt.com/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=3.4.2' type='text/css' media='all' />
<script type='text/javascript' src='http://silentmatt.com/wp-includes/js/comment-reply.min.js?ver=3.5.2'></script>
<script type='text/javascript' src='http://silentmatt.com/wp-includes/js/jquery/jquery.js?ver=1.8.3'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://silentmatt.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://silentmatt.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='JavaScript Function Plotter' href='http://silentmatt.com/javascript-function-plotter/' />
<link rel='next' title='Find addends' href='http://silentmatt.com/find-addends/' />
<meta name="generator" content="WordPress 3.5.2" />
<link rel='canonical' href='http://silentmatt.com/javascript-expression-evaluator/' />
	<link href="http://silentmatt.com/wp-content/plugins/code-block-enabler/prettify.css" type="text/css" rel="stylesheet" />
    <script type="text/javascript" src="http://silentmatt.com/wp-content/plugins/code-block-enabler/prettify.js"></script>
	</head>
<body>

<div id="rap">
	<div id="header">
		<h1><a href="/" title="It is better to remain silent and be thought a fool than to open one&#039;s mouth and remove all doubt &#8211; Abraham Lincoln">Silent Matt</a></h1>

			</div>

	<div id="content">
	<div id="sidebar">
		<div class="widget">
			<h3>
			<a href='http://silentmatt.com/about/'>About</a>			</h3>
			<p>It is better to remain silent and be thought a fool than to open one&#039;s mouth and remove all doubt &#8211; Abraham Lincoln</p>
		</div>
		
		<div class="widget">
									<h3><a href="http://silentmatt.com/blog/category/status/">Status</a></h3>

						<p>Got <a href="http://silentmatt.com/march-madness/2013.html" >my bracket</a> done just in time.</p>
					</div>
		
		<div class="widget">
		<h3 class="widgettitle">Search</h3>    <div>
    <form id="searchform" name="searchform" method="get" action="/?s=">
	<input type="text" id="livesearch" name="s" />
	<input type="submit" id="searchsubmit" style="display: none;" value="Search" />
    </form>
    </div>		</div>
		
		<div class="endbuttski"></div>
	</div>
	  	  
								<div class="post-356 page type-page status-publish hentry type-post" id="post-356">
												<h2><a href="http://silentmatt.com/javascript-expression-evaluator/" rel="bookmark" title="Permanent Link to JavaScript Expression Evaluator">JavaScript Expression Evaluator</a></h2>
				
				
				<p class="meta"></p>
<!--  <ul class="section_links">
      </ul>
-->
				<div class="entry">
										<h3>Description</h3>
<p>This library is a modified version of <a href="http://www.undefined.ch/mparser/index.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.undefined.ch']);">Raphael Graf&#8217;s ActionScript Expression Parser</a>. When I wrote the <a href="/javascript-function-plotter/">JavaScript Function Plotter</a>, I wanted a better alternative to using JavaScript&#8217;s <a href="https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Functions/Eval" >eval</a> function. There&#8217;s no security risk currently, because you can only run code in your own browser, but it&#8217;s not as convenient for math (Math.pow(2^x) instead of 2^x, etc.).</p>
<h3>Download</h3>
<p><a href="http://github.com/silentmatt/js-expression-eval/tree/master" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">Get the code from github.</a></p>
<h3>Documentation <small>(incomplete, of course)</small></h3>
<h4>Parser</h4>
<p>Parser is the main class in the library. It has &#8220;static&#8221; methods for parsing and evaluating expressions.</p>
<dl>
<dt>Parser()</dt>
<dd>Constructor. In most cases, you don&#8217;t need this. Eventually, I&#8217;ll get around to documenting why you would want to, but for now, you can figure it out by reading the source ;-).</p>
</dd>
<dt>parse({expression: string})</dt>
<dd>Convert a mathematical expression into an Expression object.</p>
</dd>
<dt>evaluate({expression: string} [, {variables: object}])</dt>
<dd>Parse and immediately evaluate an expression using the values/functions from the {variables} object.</p>
<p><code class=\'prettyprint\' >Parser.evaluate(expr, vars)</code> is equivalent to calling <code class=\'prettyprint\' >Parser.parse(expr).evaluate(vars)</code>. In fact, that&#8217;s exactly what it does.</p>
</dd>
</dl>
<h4>Parser.Expression</h4>
<p>Parser.parse returns an Expression object. Expression objects are similar to JavaScript functions, <abbr title="id est (that is)">i.e.</abbr> they can be &#8220;called&#8221; with variables bound to passed-in values. In fact, they can even be converted into JavaScript functions.</p>
<dl>
<dt>evaluate([{variables: object}])</dt>
<dd>Evaluate an expression, with variables bound to the values in {variables}. Each unbound variable in the expression is bound to the corresponding member of the {variables} object. If there are unbound variables, evaluate will throw an exception.</p>
<pre>js&gt; expr = Parser.parse("2 ^ x");
(2^x)
js&gt; expr.evaluate({ x: 3 });
8</pre>
</dd>
<dt>substitute({variable: string}, {expr: Expression, string, or number})</dt>
<dd>Create a new expression with the specified variable replaced with another expression (essentially, function composition).</p>
<pre>js&gt; expr = Parser.parse("2 * x + 1");
((2*x)+1)
js&gt; expr.substitute("x", "4 * x");
((2*(4*x))+1)
js&gt; expr2.evaluate({ x: 3});
25</pre>
</dd>
<dt>simplify({variables: object&gt;)</dt>
<dd>Simplify constant sub-expressions and replace variable references with literal values. This is basically a partial evaluation, that does as much of the calcuation as it can with the provided variables. Function calls are not evaluated (except the built-in operator functions), since they may not be deterministic.</p>
<p>Simplify is pretty simple (see what I did there?). It doesn&#8217;t know that addition and multiplication are associative, so &#8220;((2*(4*x))+1)&#8221; from the previous example cannot be simplified unless you provide a value for x. &#8220;2*4*x + 1&#8243; can however, because it&#8217;s parsed as &#8220;(((2*4)*x)+1)&#8221;, so the &#8220;(2*4)&#8221; sub-expression will be replaced with &#8220;8&#8243;, resulting in &#8220;((8*x)+1)&#8221;.</p>
<pre>js&gt; expr = Parser.parse("x * (y * atan(1))").simplify({ y: 4 });
(x*3.141592653589793)
js&gt; expr.evaluate({ x: 2 });
6.283185307179586</pre>
</dd>
<dt>variables()</dt>
<dd>Get an array of the unbound variables in the expression.</p>
<pre>js&gt; expr = Parser.parse("x * (y * atan(1))");
(x*(y*atan(1)))
js&gt; expr.variables();
x,y
js&gt; expr.simplify({ y: 4 }).variables();
x</pre>
</dd>
<dt>toString()</dt>
<dd>Convert the expression to a string. toString() surrounds every sub-expression with parentheses (except literal values, variables, and function calls), so it&#8217;s useful for debugging precidence errors.</p>
</dd>
<dt>toJSFunction({parameters: Array} [, {variables: object}])</dt>
<dd>Convert an Expression object into a callable JavaScript function. You need to provide an array of parameter names that should normally be <code class=\'prettyprint\' >expr.variables()</code>. Any unbound-variables will get their values from the global scope.</p>
<p>toJSFunction works by simplifying the Expression (with {variables}, if provided), converting it to a string, and passing the string to the Function constructor (with some of its own code to bring built-in functions and constants into scope and return the result of the expression).</p>
</dd>
</dl>
<h4>Expression Syntax</h4>
<p>The parser accepts a pretty basic grammar. Operators have the normal precidence — f(x,y,z) (function calls), ^ (exponentiation), *, /, and % (multiplication, division, and remainder), and finally +, -, and || (addition, subtraction, and string concatenation) — and bind from left to right (yes, even exponentiation&#8230; it&#8217;s simpler that way).</p>
<p>There&#8217;s also a &#8220;,&#8221; (comma) operator that concatenates values into an array. It&#8217;s mostly useful for passing arguments to functions, since it doesn&#8217;t always behave like you would think with regards to multi-dimensional arrays. If the left value is an array, it pushes the right value onto the end of the array, otherwise, it creates a new array &#8220;[left, right]&#8220;. This makes it impossible to create an array with another array as it&#8217;s first element.</p>
<h4>Function operators</h4>
<p>The parser has several built-in &#8220;functions&#8221; that are actually operators. The only difference from an outside point of view, is that they cannot be called with multiple arguments and they are evaluated by the simplify method if their arguments are constant.</p>
<table>
<thead>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">Function</th>
<th style="text-align: left; padding-right: 1em; vertical-align: top;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">sin(x)</th>
<td>Sine of x (x is in radians)</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">cos(x)</th>
<td>Cosine of x (x is in radians)</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">tan(x)</th>
<td>Tangent of x (x is&#8230; well, you know)</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">asin(x)</th>
<td>Arc sine of x (in radians)</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">acos(x)</th>
<td>Arc cosine of x (in radians)</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">atan(x)</th>
<td>Arc tangent of x (in radians)</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">sqrt(x)</th>
<td>Square root of x. Result is NaN (Not a Number) if x is negative.</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">log(x)</th>
<td><strong>Natural</strong> logarithm of x (not base-10). <a href="http://www.youtube.com/watch?v=hP0kWqJJZa4" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.youtube.com']);" target="_blank">It&#8217;s log</a> instead of ln because that&#8217;s what JavaScript calls it.</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">abs(x)</th>
<td>Absolute value (magnatude) of x</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">ceil(x)</th>
<td>Ceiling of x — the smallest integer that&#8217;s &gt;= x.</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">floor(x)</th>
<td>Floor of x — the largest integer that&#8217;s &lt;= x</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">round(x)</th>
<td>X, rounded to the nearest integer, using &#8220;gradeschool rounding&#8221;.</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">exp(x)</th>
<td><em>e</em><sup>x</sup> (exponential/antilogarithm function with base <em>e</em>)</td>
</tr>
</tbody>
</table>
<h4>Pre-defined functions</h4>
<p>Besides the &#8220;operator&#8221; functions, there are several pre-defined functions. You can provide your own, by binding variables to normal JavaScript functions. These are not evaluated by simplify.</p>
<table>
<thead>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">Function</th>
<th style="text-align: left; padding-right: 1em; vertical-align: top;">Description</th>
</tr>
</thead>
<tbody>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">random(n)</th>
<td>Get a random number in the range [0, n). If n is zero, or not provided, it defaults to 1.</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">fac(n)</th>
<td>n! (factorial of n: &#8220;n * (n-1) * (n-2) * &#8230; * 2 * 1&#8243;)</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">min(a,b,&#8230;)</th>
<td>Get the smallest (&#8220;minimum&#8221;) number in the list</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">max(a,b,&#8230;)</th>
<td>Get the largest (&#8220;maximum&#8221;) number in the list</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">pyt(a, b)</th>
<td>Pythagorean function, <abbr title="id est (that is)">i.e.</abbr> the c in &#8220;c<sup>2</sup> = a<sup>2</sup> + b<sup>2</sup>&#8220;</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">pow(x, y)</th>
<td>x<sup>y</sup>. This is exactly the same as &#8220;x^y&#8221;. It&#8217;s just provided since it&#8217;s in the Math object from JavaScript</td>
</tr>
<tr>
<th style="text-align: left; width: 6em; padding-right: 1em; vertical-align: top;">atan2(y, x)</th>
<td>arc tangent of x/y. <abbr title="id est (that is)">i.e.</abbr> the angle between (0, 0) and (x, y) in radians.</td>
</tr>
</tbody>
</table>
													</div>

				<div class="endbuttski">

								</div>
											</div>
								
		<div class="navigation">
			<div class="alignleft"></div>
			<div class="alignright"></div>
		</div>
		<div class="navigation_to_home"><a href="http://silentmatt.com">&laquo; Back to Home</a></div>
		
	<script type="text/javascript">
		window.onload = function(){prettyPrint();};
	</script>
<div id="footer">
<div id="footer_box">
	<p>
		<a href="http://wordpress.org/" rel="generator">Powered by WordPress</a></p>
	<p>Theme: <strong>DePo Square</strong> by <a href="http://powazek.com" rel="designer">Derek Powazek</a></p>
	<p class="rss">
		<a href="http://silentmatt.com/feed/"><img src="http://silentmatt.com/wp-content/themes/depo-square/i/depo-rss.png" alt="rss" /></a><a href="http://silentmatt.com/feed/">RSS Feed</a>
	</p>
</div>
	<p><a href="/contact/">Contact Matthew</a></p>
</div>
<!-- content -->
</div>
<!-- rap -->
</div>
<script type='text/javascript' src='http://silentmatt.com/wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js?ver=3.36.0-2013.06.16'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var _wpcf7 = {"loaderUrl":"http:\/\/silentmatt.com\/wp-content\/plugins\/contact-form-7\/images\/ajax-loader.gif","sending":"Sending ..."};
/* ]]> */
</script>
<script type='text/javascript' src='http://silentmatt.com/wp-content/plugins/contact-form-7/includes/js/scripts.js?ver=3.4.2'></script>
</body>
</html>
