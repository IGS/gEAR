#!/opt/bin/python3
'''
Redirects short permalink urls to actual long url

c = gene cart share ID
g = gene_symbol to search
gsem = toggle exact match searching for gene symbols (truthy value)
l = profile/layout ID
p = page to send to:
    <null> = expression.html (default)
    a = sc_workbench.html
    de = dataset_explorer.html
    gcm = gene_list_manager.html
    p = projection.html
s = dataset_share_id
ss = search string (for use in things like dataset/gene cart explorers)
id = id from identifiers.org, in the format like d.a59037e8 or p.bfd178f5

'''

import cgi
import os


def check_for_truthy(value):
    """
    Checks if the given value is considered truthy.

    Returns 1 if the value is considered truthy, 0 otherwise.
    Specifically, returns 0 if the value is None or a string representing a falsy value
    ('0', 'false', 'f', 'no', 'n', case-insensitive). For all other cases, returns 1.

    Args:
        value: The value to check for truthiness.

    Returns:
        int: 1 if the value is truthy, 0 otherwise.
    """
    # Return as 0/1
    if value is None:
        return 0
    if isinstance(value, str):
        value = value.lower()
        if value in ('0', 'false', 'f', 'no', 'n'):
            return 0
    return 1

def main():
    print('Content-Type: text/html\n\n')
    form = cgi.FieldStorage()
    gene_cart = form.getvalue('c')
    gene_symbol = form.getvalue('g')
    gene_symbol_exact_match = form.getvalue('gsem')
    multi = form.getvalue("multi")
    patterns = form.getvalue("ptrns")
    algo = form.getvalue("algo")
    zscore = form.getvalue("zscore")
    minclip = form.getvalue("minclip", None)
    layout_share_id = form.getvalue('l')
    page = form.getvalue('p')
    dataset_share_id = form.getvalue('s')
    identifiers_org_id = form.getvalue('id')
    search_string = form.getvalue('ss') # URL-encoded
    share_used = 1

    url_base = os.environ['REQUEST_SCHEME'] + '://' + os.environ['HTTP_HOST'] + os.environ['REQUEST_URI'].split('p')[0]
    main_page = 'expression.html'

    match page:
        case 'a':
            main_page = 'sc_workbench.html'
        case 'de':
            main_page = 'dataset_explorer.html'
        case 'gcm':
            main_page = 'gene_list_manager.html'
        case 'p':
            main_page = 'projection.html'

    url = url_base + '/' + main_page

    params = dict()
    params['share_used'] = share_used

    if dataset_share_id is not None:
        params['share_id'] = dataset_share_id

    if layout_share_id is not None:
        params['layout_id'] = layout_share_id

    if gene_symbol is not None:
        params['gene_symbol'] = gene_symbol

    # Set gene_symbol_exact_match to 1 by default on pages where it makes sense
    if page not in ('a', 'de', 'gcm', 'p'):
        params['gene_symbol_exact_match'] = check_for_truthy(gene_symbol_exact_match)

    if gene_cart:
        key = 'gene_lists'
        if page == "p":
            key = 'projection_source'
        params[key] = gene_cart

    if multi:
        key = "is_multigene"
        if page == "p":
            key = "multipattern_plots"
        params[key] = multi

    if page == "p":
        if patterns:
            params["projection_patterns"] = patterns

        if algo:
            params["projection_algorithm"] = algo

        params["zscore"] = check_for_truthy(zscore)

        if minclip is not None:
            params["minclip"] = minclip

    if search_string and (page == "de" or page == "gcm"):
        params["search_string"] = search_string

    if identifiers_org_id:
        (id_prefix, identifiers_share_id) = identifiers_org_id.split('.')

        if id_prefix == 'd':
            params['share_id'] = identifiers_share_id

        elif id_prefix == 'p':
            params['layout_id'] = identifiers_share_id

    if len(params) > 0:
        url += '?'
        first_param = True

        for p in params:
            if first_param:
                url += "{0}={1}".format(p, params[p])
                first_param = False
            else:
                url += "&{0}={1}".format(p, params[p])

    #redirect user to permalink
    print("""<!DOCTYPE html>
    <html>
    <head>
    <title>gEAR Portal</title>
    <meta http-equiv="refresh" content="0;URL='{0}'" />
    </head>
    <body>
    </body>
    </html>
    """.format(url))

if __name__ == '__main__':
    main()
